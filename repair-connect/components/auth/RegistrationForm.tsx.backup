'use client'

import { useState } from 'react'
import { useRouter } from 'next/navigation'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import Link from 'next/link'
import { Eye, EyeOff, Loader2, ArrowLeft, User, Building2 } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { 
  CustomerRegistrationSchema, 
  WorkshopRegistrationSchema,
  type CustomerRegistrationData,
  type WorkshopRegistrationData 
} from '@/lib/validations'

type RegistrationStep = 'role' | 'details' | 'confirmation'

export function RegistrationForm() {
  const [currentStep, setCurrentStep] = useState<RegistrationStep>('role')
  const [selectedRole, setSelectedRole] = useState<'customer' | 'workshop' | null>(null)
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  
  const router = useRouter()

  const customerForm = useForm<CustomerRegistrationData>({
    resolver: zodResolver(CustomerRegistrationSchema),
    defaultValues: {
      role: 'customer',
      acceptTerms: false,
    },
  })

  const workshopForm = useForm<WorkshopRegistrationData>({
    resolver: zodResolver(WorkshopRegistrationSchema),
    defaultValues: {
      role: 'workshop',
      acceptTerms: false,
      businessAddress: {
        street: '',
        city: '',
        state: '',
        zipCode: '',
      },
    },
  })

  const currentForm = selectedRole === 'customer' ? customerForm : workshopForm

  async function onSubmit(data: CustomerRegistrationData | WorkshopRegistrationData) {
    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
      })

      const result = await response.json()

      if (!response.ok) {
        throw new Error(result.error || 'Registration failed')
      }

      // Registration successful
      setCurrentStep('confirmation')
    } catch (error) {
      console.error('Registration error:', error)
      setError(error instanceof Error ? error.message : 'An unexpected error occurred')
    } finally {
      setIsLoading(false)
    }
  }

  function handleRoleSelection(role: 'customer' | 'workshop') {
    setSelectedRole(role)
    setCurrentStep('details')
  }

  function handleBack() {
    if (currentStep === 'details') {
      setCurrentStep('role')
      setSelectedRole(null)
    } else if (currentStep === 'business') {
      setCurrentStep('details')
    }
  }

  // Removed handleNext - no longer needed with simplified form

  // Confirmation step
  if (currentStep === 'confirmation') {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <Card>
            <CardHeader className="text-center">
              <CardTitle className="text-2xl font-heading text-success">Registration Successful!</CardTitle>
              <CardDescription>
                Your account has been created successfully. You can now sign in.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="text-center">
                <p className="text-sm text-gray-600 mb-4">
                  Please check your email for verification instructions.
                </p>
                <Button onClick={() => router.push('/auth/login')} className="w-full">
                  Sign In
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  // Role selection step
  if (currentStep === 'role') {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
        <div className="max-w-md w-full space-y-8">
          <Card>
            <CardHeader className="text-center">
              <CardTitle className="text-2xl font-heading">Join Repair Connect</CardTitle>
              <CardDescription>
                Choose your account type to get started
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="grid gap-4">
                <button
                  onClick={() => handleRoleSelection('customer')}
                  className="p-6 border-2 border-gray-200 rounded-lg hover:border-primary hover:bg-primary/5 transition-colors text-left"
                >
                  <h3 className="font-semibold text-lg mb-2">I&apos;m a Customer</h3>
                  <p className="text-gray-600 text-sm">
                    I need repair services for my vehicle
                  </p>
                </button>
                <button
                  onClick={() => handleRoleSelection('workshop')}
                  className="p-6 border-2 border-gray-200 rounded-lg hover:border-primary hover:bg-primary/5 transition-colors text-left"
                >
                  <h3 className="font-semibold text-lg mb-2">I&apos;m a Workshop</h3>
                  <p className="text-gray-600 text-sm">
                    I provide repair services and want to connect with customers
                  </p>
                </button>
              </div>
              <div className="text-center">
                <p className="text-sm text-gray-600">
                  Already have an account?{' '}
                  <Link href="/auth/login" className="text-primary hover:underline font-medium">
                    Sign in
                  </Link>
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    )
  }

  // Form steps (details and business)
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <Card>
          <CardHeader className="text-center">
            <CardTitle className="text-2xl font-heading">
              {selectedRole === 'customer' ? 'Customer Registration' : 'Workshop Registration'}
            </CardTitle>
            <CardDescription>
              {currentStep === 'details' 
                ? selectedRole === 'customer' ? 'Enter your personal information' : 'Enter your contact information'
                : 'Enter your business information'
              }
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {error && (
              <div className="bg-warning/10 border border-warning/20 text-warning-foreground px-4 py-3 rounded-md text-sm">
                {error}
              </div>
            )}

            <form onSubmit={currentForm.handleSubmit(onSubmit)} className="space-y-4">
              {selectedRole === 'customer' && (
                <>
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">
                        First Name
                      </label>
                      <input
                        {...customerForm.register('firstName')}
                        id="firstName"
                        type="text"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="John"
                      />
                      {customerForm.formState.errors.firstName && (
                        <p className="mt-1 text-sm text-warning">{customerForm.formState.errors.firstName.message}</p>
                      )}
                    </div>
                    <div>
                      <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">
                        Last Name
                      </label>
                      <input
                        {...customerForm.register('lastName')}
                        id="lastName"
                        type="text"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="Doe"
                      />
                      {customerForm.formState.errors.lastName && (
                        <p className="mt-1 text-sm text-warning">{customerForm.formState.errors.lastName.message}</p>
                      )}
                    </div>
                  </div>

                  <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                      Email Address
                    </label>
                    <input
                      {...customerForm.register('email')}
                      id="email"
                      type="email"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                      placeholder="john@example.com"
                    />
                    {customerForm.formState.errors.email && (
                      <p className="mt-1 text-sm text-warning">{customerForm.formState.errors.email.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                      Phone Number
                    </label>
                    <input
                      {...customerForm.register('phone')}
                      id="phone"
                      type="tel"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                      placeholder="+1 (555) 123-4567"
                    />
                    {customerForm.formState.errors.phone && (
                      <p className="mt-1 text-sm text-warning">{customerForm.formState.errors.phone.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                      Password
                    </label>
                    <div className="mt-1 relative">
                      <input
                        {...customerForm.register('password')}
                        id="password"
                        type={showPassword ? 'text' : 'password'}
                        className="block w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="Create a strong password"
                      />
                      <button
                        type="button"
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? (
                          <EyeOff className="h-4 w-4 text-gray-400" />
                        ) : (
                          <Eye className="h-4 w-4 text-gray-400" />
                        )}
                      </button>
                    </div>
                    {customerForm.formState.errors.password && (
                      <p className="mt-1 text-sm text-warning">{customerForm.formState.errors.password.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                      Confirm Password
                    </label>
                    <div className="mt-1 relative">
                      <input
                        {...customerForm.register('confirmPassword')}
                        id="confirmPassword"
                        type={showConfirmPassword ? 'text' : 'password'}
                        className="block w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="Confirm your password"
                      />
                      <button
                        type="button"
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      >
                        {showConfirmPassword ? (
                          <EyeOff className="h-4 w-4 text-gray-400" />
                        ) : (
                          <Eye className="h-4 w-4 text-gray-400" />
                        )}
                      </button>
                    </div>
                    {customerForm.formState.errors.confirmPassword && (
                      <p className="mt-1 text-sm text-warning">{customerForm.formState.errors.confirmPassword.message}</p>
                    )}
                  </div>

                  <div className="flex items-center">
                    <input
                      {...customerForm.register('acceptTerms')}
                      id="acceptTerms"
                      type="checkbox"
                      className="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                    />
                    <label htmlFor="acceptTerms" className="ml-2 block text-sm text-gray-700">
                      I agree to the{' '}
                      <Link href="/terms" className="text-primary hover:underline">
                        Terms of Service
                      </Link>{' '}
                      and{' '}
                      <Link href="/privacy" className="text-primary hover:underline">
                        Privacy Policy
                      </Link>
                    </label>
                  </div>
                  {customerForm.formState.errors.acceptTerms && (
                    <p className="mt-1 text-sm text-warning">{customerForm.formState.errors.acceptTerms.message}</p>
                  )}
                </>
              )}

              {selectedRole === 'workshop' && currentStep === 'details' && (
                <>
                  <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                      Email Address
                    </label>
                    <input
                      {...workshopForm.register('email')}
                      id="email"
                      type="email"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                      placeholder="workshop@example.com"
                    />
                    {workshopForm.formState.errors.email && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.email.message}</p>
                    )}
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label htmlFor="ownerFirstName" className="block text-sm font-medium text-gray-700">
                        Owner First Name
                      </label>
                      <input
                        {...workshopForm.register('ownerFirstName')}
                        id="ownerFirstName"
                        type="text"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="John"
                      />
                      {workshopForm.formState.errors.ownerFirstName && (
                        <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.ownerFirstName.message}</p>
                      )}
                    </div>
                    <div>
                      <label htmlFor="ownerLastName" className="block text-sm font-medium text-gray-700">
                        Owner Last Name
                      </label>
                      <input
                        {...workshopForm.register('ownerLastName')}
                        id="ownerLastName"
                        type="text"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="Doe"
                      />
                      {workshopForm.formState.errors.ownerLastName && (
                        <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.ownerLastName.message}</p>
                      )}
                    </div>
                  </div>

                  <div>
                    <label htmlFor="ownerPhone" className="block text-sm font-medium text-gray-700">
                      Owner Phone
                    </label>
                    <input
                      {...workshopForm.register('ownerPhone')}
                      id="ownerPhone"
                      type="tel"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                      placeholder="+1 (555) 123-4567"
                    />
                    {workshopForm.formState.errors.ownerPhone && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.ownerPhone.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                      Password
                    </label>
                    <div className="mt-1 relative">
                      <input
                        {...workshopForm.register('password')}
                        id="password"
                        type={showPassword ? 'text' : 'password'}
                        className="block w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="Create a strong password"
                      />
                      <button
                        type="button"
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? (
                          <EyeOff className="h-4 w-4 text-gray-400" />
                        ) : (
                          <Eye className="h-4 w-4 text-gray-400" />
                        )}
                      </button>
                    </div>
                    {workshopForm.formState.errors.password && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.password.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                      Confirm Password
                    </label>
                    <div className="mt-1 relative">
                      <input
                        {...workshopForm.register('confirmPassword')}
                        id="confirmPassword"
                        type={showConfirmPassword ? 'text' : 'password'}
                        className="block w-full px-3 py-2 pr-10 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="Confirm your password"
                      />
                      <button
                        type="button"
                        className="absolute inset-y-0 right-0 pr-3 flex items-center"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      >
                        {showConfirmPassword ? (
                          <EyeOff className="h-4 w-4 text-gray-400" />
                        ) : (
                          <Eye className="h-4 w-4 text-gray-400" />
                        )}
                      </button>
                    </div>
                    {workshopForm.formState.errors.confirmPassword && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.confirmPassword.message}</p>
                    )}
                  </div>
                </>
              )}

              {selectedRole === 'workshop' && currentStep === 'business' && (
                <>
                  <div>
                    <label htmlFor="businessName" className="block text-sm font-medium text-gray-700">
                      Business Name
                    </label>
                    <input
                      {...workshopForm.register('businessName')}
                      id="businessName"
                      type="text"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                      placeholder="ABC Auto Repair"
                    />
                    {workshopForm.formState.errors.businessName && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.businessName.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="businessType" className="block text-sm font-medium text-gray-700">
                      Business Type
                    </label>
                    <select
                      {...workshopForm.register('businessType')}
                      id="businessType"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                    >
                      <option value="auto_repair">Auto Repair</option>
                      <option value="body_shop">Body Shop</option>
                      <option value="tire_service">Tire Service</option>
                      <option value="oil_change">Oil Change</option>
                      <option value="specialty">Specialty Service</option>
                    </select>
                    {workshopForm.formState.errors.businessType && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.businessType.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="businessPhone" className="block text-sm font-medium text-gray-700">
                      Business Phone
                    </label>
                    <input
                      {...workshopForm.register('businessPhone')}
                      id="businessPhone"
                      type="tel"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                      placeholder="+1 (555) 987-6543"
                    />
                    {workshopForm.formState.errors.businessPhone && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.businessPhone.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="businessLicense" className="block text-sm font-medium text-gray-700">
                      Business License Number
                    </label>
                    <input
                      {...workshopForm.register('businessLicense')}
                      id="businessLicense"
                      type="text"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                      placeholder="BL123456789"
                    />
                    {workshopForm.formState.errors.businessLicense && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.businessLicense.message}</p>
                    )}
                  </div>

                  <div>
                    <label htmlFor="insuranceInfo" className="block text-sm font-medium text-gray-700">
                      Insurance Information
                    </label>
                    <input
                      {...workshopForm.register('insuranceInfo')}
                      id="insuranceInfo"
                      type="text"
                      className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                      placeholder="Insurance policy number"
                    />
                    {workshopForm.formState.errors.insuranceInfo && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.insuranceInfo.message}</p>
                    )}
                  </div>

                  {/* Business Address */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-medium text-gray-900">Business Address</h3>
                    
                    <div>
                      <label htmlFor="businessAddress.street" className="block text-sm font-medium text-gray-700">
                        Street Address
                      </label>
                      <input
                        {...workshopForm.register('businessAddress.street')}
                        id="businessAddress.street"
                        type="text"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="123 Main Street"
                      />
                      {workshopForm.formState.errors.businessAddress?.street && (
                        <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.businessAddress.street.message}</p>
                      )}
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label htmlFor="businessAddress.city" className="block text-sm font-medium text-gray-700">
                          City
                        </label>
                        <input
                          {...workshopForm.register('businessAddress.city')}
                          id="businessAddress.city"
                          type="text"
                          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                          placeholder="New York"
                        />
                        {workshopForm.formState.errors.businessAddress?.city && (
                          <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.businessAddress.city.message}</p>
                        )}
                      </div>
                      
                      <div>
                        <label htmlFor="businessAddress.state" className="block text-sm font-medium text-gray-700">
                          State
                        </label>
                        <input
                          {...workshopForm.register('businessAddress.state')}
                          id="businessAddress.state"
                          type="text"
                          className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                          placeholder="NY"
                        />
                        {workshopForm.formState.errors.businessAddress?.state && (
                          <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.businessAddress.state.message}</p>
                        )}
                      </div>
                    </div>

                    <div>
                      <label htmlFor="businessAddress.zipCode" className="block text-sm font-medium text-gray-700">
                        ZIP Code
                      </label>
                      <input
                        {...workshopForm.register('businessAddress.zipCode')}
                        id="businessAddress.zipCode"
                        type="text"
                        className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary"
                        placeholder="10001"
                      />
                      {workshopForm.formState.errors.businessAddress?.zipCode && (
                        <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.businessAddress.zipCode.message}</p>
                      )}
                    </div>
                  </div>

                  {/* Services Offered */}
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Services Offered
                    </label>
                    <div className="grid grid-cols-2 gap-2">
                      {[
                        'Engine Repair',
                        'Brake Service', 
                        'Oil Change',
                        'Tire Service',
                        'Body Work',
                        'Paint Service',
                        'Electrical Repair',
                        'AC/Heating',
                        'Transmission',
                        'Suspension',
                        'Exhaust System',
                        'Diagnostic'
                      ].map((service) => (
                        <label key={service} className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            value={service}
                            {...workshopForm.register('servicesOffered')}
                            className="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                          />
                          <span className="text-sm text-gray-700">{service}</span>
                        </label>
                      ))}
                    </div>
                    {workshopForm.formState.errors.servicesOffered && (
                      <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.servicesOffered.message}</p>
                    )}
                  </div>

                  <div className="flex items-center">
                    <input
                      {...workshopForm.register('acceptTerms')}
                      id="acceptTerms"
                      type="checkbox"
                      className="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                    />
                    <label htmlFor="acceptTerms" className="ml-2 block text-sm text-gray-700">
                      I agree to the{' '}
                      <Link href="/terms" className="text-primary hover:underline">
                        Terms of Service
                      </Link>{' '}
                      and{' '}
                      <Link href="/privacy" className="text-primary hover:underline">
                        Privacy Policy
                      </Link>
                    </label>
                  </div>
                  {workshopForm.formState.errors.acceptTerms && (
                    <p className="mt-1 text-sm text-warning">{workshopForm.formState.errors.acceptTerms.message}</p>
                  )}
                </>
              )}

              <div className="flex gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleBack}
                  className="flex-1"
                >
                  <ArrowLeft className="mr-2 h-4 w-4" />
                  Back
                </Button>
                
                {selectedRole === 'workshop' && currentStep === 'details' ? (
                  <Button
                    type="button"
                    onClick={handleNext}
                    className="flex-1"
                  >
                    Next
                    <ArrowRight className="ml-2 h-4 w-4" />
                  </Button>
                ) : (
                  <Button 
                    type="submit" 
                    className="flex-1" 
                    disabled={isLoading}
                  >
                    {isLoading ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Creating Account...
                      </>
                    ) : (
                      'Create Account'
                    )}
                  </Button>
                )}
              </div>
            </form>

            <div className="text-center">
              <p className="text-sm text-gray-600">
                Already have an account?{' '}
                <Link href="/auth/login" className="text-primary hover:underline font-medium">
                  Sign in
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}